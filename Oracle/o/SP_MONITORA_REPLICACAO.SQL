CREATE OR REPLACE PROCEDURE BRDBA.SP_MONITORA_REPLICACAO( PE_COMPARAR      NUMBER
                                                         ,PE_CAMINHO_AVISO VARCHAR2 ) IS
setINDEX         NUMBER := 0;
setSTRING        VARCHAR2(2000);
setQTFILA        NUMBER := 0;
setCONTADOR      NUMBER := 0;
setIXINVALIDOS   NUMBER := 0;
setOBJINVALIDOS  NUMBER := 0;
setCONREPADMIN   NUMBER := 0;
setQTENCONTRADO  NUMBER := 0;
setJOBBROKEN     NUMBER := 0;
setTRANSACAO     NUMBER := 0;
setQTCONEXOES    NUMBER := 0;
setRETORNO       INTEGER;
getCURSOR        NUMBER;
F_AVISO          UTL_FILE.FILE_TYPE;
F_LOG            UTL_FILE.FILE_TYPE;

CURSOR C_FILA IS
  SELECT /*+ index (A SYS_C002219) +*/ A.ENQ_TID
    FROM SYSTEM.DEF$_AQCALL A
ORDER BY A.ENQ_TIME;

TYPE A_MATRIZ_REPLICACAO IS
 ARRAY(50000) OF VARCHAR2(900);

A_REPLICACAO  A_MATRIZ_REPLICACAO := A_MATRIZ_REPLICACAO();

BEGIN

  -- VERFICA SE A REPLICACAO ESTA OK
  FOR RC_FILA IN C_FILA LOOP

    BEGIN
      SELECT COUNT(1) INTO setQTFILA
        FROM TBDBA_TRANSACAO_REPLICACAO
       WHERE ENQ_TID = RC_FILA.ENQ_TID;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;         

    setTRANSACAO := setTRANSACAO + 1;
    setCONTADOR  := setCONTADOR + setQTFILA;
    setQTFILA    := 0;

    -- TRANSACAO AS SEREM VERIFICADAS NA PROXIMA EXECUCAO
    IF setTRANSACAO > 100 THEN
       EXIT;
    END IF;

  END LOOP;

  -- EXCLUIR AS TRANSACAO ANTERIORS E FAZER NOVA CARGA
  DELETE TBDBA_TRANSACAO_REPLICACAO;
  COMMIT;

  setTRANSACAO := 0;

  -- FAZER NOVA CARGA PARA CHEGAR DAQUI A POUCO
  FOR RC_FILA IN C_FILA LOOP

    BEGIN
      INSERT INTO TBDBA_TRANSACAO_REPLICACAO(ENQ_TID)
         VALUES(RC_FILA.ENQ_TID);
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    setTRANSACAO := setTRANSACAO + 1;

    -- TRANSACAO AS SEREM VERIFICADAS NA PROXIMA EXECUCAO
    IF setTRANSACAO > 100 THEN
       EXIT;
    END IF;

  END LOOP;

  COMMIT;

  -- SE setCONTADOR <> 0 NAO ESTA REPLICANDO
  IF setCONTADOR <> 0 THEN
     A_REPLICACAO.EXTEND;
     setINDEX := setINDEX + 1;   
     A_REPLICACAO(setINDEX) := '1#- NAO ESTA REPLICANDO, EXISTEM TRANSACOES ANTIGAS NA FILA';

  -- GERA NUMERO DO PROCESSO PARA O UNIX FAZER KILL
  -- BEGIN
  --   PRC_SPID( PE_CAMINHO_LOG );
  -- EXCEPTION
  --   WHEN OTHERS THEN
  --     NULL;
  -- END;

  END IF;

  -- VERIFICA SE 
  IF PE_COMPARAR IS NOT NULL THEN

     BEGIN
       SELECT /*+ index_ffs (A SYS_C002219) +*/ COUNT(A.ENQ_TID) INTO setQTENCONTRADO
         FROM SYSTEM.DEF$_AQCALL A;
     EXCEPTION
       WHEN OTHERS THEN
         NULL;
     END;

     -- O PARAMETRO SETADOR ESTA INFERIOR A QTD NA FILA
     IF setQTENCONTRADO > PE_COMPARAR THEN
        A_REPLICACAO.EXTEND;
        setINDEX := setINDEX + 1;
        A_REPLICACAO(setINDEX) := '2#- A FILA DE REPLICACAO ESTA MAIOR QUE O PARAMETRO ESTABELECIDO NA MONITORACAO';        
     END IF;

     -- ATUALIZAR LOTES DE REPLICACAO
     BEGIN
       UPDATE TBDBA_FILA_PARAM
          SET QT_ATUAL_ACUM = setQTENCONTRADO;
     EXCEPTION
       WHEN OTHERS THEN
         NULL;
     END;

     COMMIT;

  END IF;

  -- VERIFICA SE EXISTE INDICES INVALIDOS
  BEGIN
    SELECT COUNT(1) INTO setIXINVALIDOS
      FROM DBA_INDEXES
     WHERE STATUS<>'VALID';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  -- INCLUI NO ARRAY
  IF setIXINVALIDOS > 0 THEN
     A_REPLICACAO.EXTEND;
     setINDEX := setINDEX + 1;   
     A_REPLICACAO(setINDEX) := '3#- EXISTEM INDICES INVALIDOS NA BASE DE DADOS';
  END IF;

  -- VERIFICA SE EXISTE JOBS EM BROKEN
  BEGIN
    SELECT COUNT(1) INTO setJOBBROKEN
      FROM DBA_JOBS
     WHERE SCHEMA_USER='REPADMIN'
       AND BROKEN='Y';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  -- INCLUI NO ARRAY
  IF setJOBBROKEN > 0 THEN
     A_REPLICACAO.EXTEND;
     setINDEX := setINDEX + 1;   
     A_REPLICACAO(setINDEX) := '4#- EXISTEM JOBS DE REPLICACAO EM BROKEN';
  END IF;

  -- VERIFICA SE EXISTE OBJETOS INVALIDOS
  BEGIN
    SELECT COUNT(1) INTO setOBJINVALIDOS
      FROM SYS.DBA_OBJECTS
     WHERE STATUS='INVALID';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  -- INCLUI NO ARRAY
  IF setOBJINVALIDOS > 0 THEN
     A_REPLICACAO.EXTEND;
     setINDEX := setINDEX + 1;   
     A_REPLICACAO(setINDEX) := '5#- EXISTEM OBJETOS DA BASE DE DADOS INVALIDOS';
  END IF;

  -- CONEXOES DO REPADMIN
  BEGIN
    SELECT COUNT(1) INTO setCONREPADMIN
      FROM V$SESSION
     WHERE USERNAME='REPADMIN'
       AND STATUS='ACTIVE';
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  -- INCLUI NO ARRAY
  IF setCONREPADMIN <= 0 THEN
     -- CONEXOES DO REPADMIN PODE ESTA ZERADA DEVIDO A FILA ESTA ZERADA, POR ISSO VERIFICO
     IF setQTENCONTRADO <> 0 THEN
        A_REPLICACAO.EXTEND;
        setINDEX := setINDEX + 1;   
        A_REPLICACAO(setINDEX) := '6#- NAO EXISTEM CONEXOES DO REPADMIN PARA REPLICACAO';
     END IF;
  END IF;

  -- VERIFICA O NUMERO DE PROCESSOS ABERTOS NO ORACLE ==> PARAMETRIZADO 2000
  BEGIN
    SELECT COUNT(1) INTO setQTCONEXOES
      FROM V$SESSION;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  -- INCLUI NO ARRAY
  IF setQTCONEXOES > 2000 THEN
     A_REPLICACAO.EXTEND;
     setINDEX := setINDEX + 1;   
     A_REPLICACAO(setINDEX) := '7#- ULTRAPASSOU NUMERO MAXIMO DE CONEXOES DEFINIDAS NO ORACLE';
  END IF;

  -- VERIFICA SITUACAO DO LINK
  FOR RC_LINK IN (SELECT DBLINK FROM SYSTEM.DEF$_DESTINATION) LOOP

    BEGIN
      setSTRING  := 'SELECT COUNT(*) FROM GLOBAL_NAME@'||RC_LINK.DBLINK;
      getCURSOR  := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(getCURSOR,setSTRING,DBMS_SQL.V7);
      setRETORNO := DBMS_SQL.EXECUTE(getCURSOR);
      DBMS_SQL.CLOSE_CURSOR(getCURSOR);

    EXCEPTION
      WHEN OTHERS THEN
        -- LINK OK
        A_REPLICACAO.EXTEND;
        setINDEX := setINDEX + 1;   
        A_REPLICACAO(setINDEX) := '8#- A CONEXAO COM '||RC_LINK.DBLINK||' NAO ESTA OK';
    END;

  END LOOP;

  -- GERACAO DO ARQUIVO TEXTO
  FOR I IN 1..setINDEX LOOP

    IF I=1 THEN

       -- AVISO AO OPERADOR
       F_LOG := UTL_FILE.FOPEN(PE_CAMINHO_AVISO, 'aviso_replicacao.txt', 'W');
       UTL_FILE.PUT_LINE(F_LOG,'FAVOR AVISAR O DBA PARA QUALQUER OCORRENCIA ABAIXO:');
       UTL_FILE.PUT_LINE(F_LOG,'---------------------------------------------------');

    END IF;

    UTL_FILE.PUT_LINE(F_LOG, A_REPLICACAO(I));
 
  END LOOP;

  UTL_FILE.FCLOSE(F_LOG);
  A_REPLICACAO.DELETE;

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERRO: '||SQLERRM );
END;
/
SHOW ERRORS
